- name: get RDS endpoint
  local_action:
    rds command=facts instance_name=gig-qa-rds region="{{ aws_region }}"
  register: rds
  
- debug:
    var: rds.instance.endpoint
    verbosity: 3

- name: install psycopg2
  yum: 
    name: python27-psycopg2
    state: present
  become: true
  
- name: ensure psql is available
  yum:
    name: postgresql95
    state: present
  become: true

- name: create test_data directory
  file: 
    path: /home/ec2-user/test_data
    state: directory
    
# auth problem
# - name: download sample counties data from S3
#   s3:
#     bucket: geogig-qa
#     object: /performance-test-data/counties.sql
#     dest: /home/ec2-user/test_data/counties.sql
#     mode: get

# - name: download sample streets data from S3
#   s3:
#     bucket: geogig-qa
#     object: /performance-test-data/NYstreets_lion.zip
#     dest: /home/ec2-user/test_data/NYstreets_lion.zip
#     mode: get

- name: unzip streets data
  unarchive:
    src: /home/ec2-user/test_data/NYstreets_lion.zip
    dest: /home/ec2-user/test_data/
    remote_src: true

# - name: download sample buildings data from S3
#   s3:
#     bucket: geogig-qa
#     object: /performance-test-data/building_footprints.zip
#     dest: /home/ec2-user/test_data/building_footprints.zip
#     mode: get

- name: unzip buildings data
  unarchive:
    src: /home/ec2-user/test_data/building_footprints.zip
    dest: /home/ec2-user/test_data/
    remote_src: true
    
# - name: download sample buildings data from S3
#   s3:
#     bucket: geogig-qa
#     object: /performance-test-data/nyc_bikepaths.zip
#     dest: /home/ec2-user/test_data/nyc_bikepaths.zip
#     mode: get

- name: unzip bike data
  unarchive:
    src: /home/ec2-user/test_data/nyc_bikepaths.zip
    dest: /home/ec2-user/test_data/
    remote_src: true
    
- name: create db for data
  postgresql_db:
    name: test_data
    login_host: "{{ rds.instance.endpoint }}"
    login_user: postgres
    login_password: Open4Good 
    state: present
  
- name: add postgis to test_data db
  postgresql_ext:
    name: postgis
    db: test_data
    login_host: "{{ rds.instance.endpoint }}"
    login_user: postgres
    login_password: Open4Good 
    state: present

- name: prepare postgis table for counties data
  command: psql -U postgres -h "{{ rds.instance.endpoint }}" -d test_data -c 'create domain bigdate as bigint'
  environment: 
    PGPASSWORD: Open4Good
  ignore_errors: true
    
- name: create mapstory user for counties data
  command: psql -U postgres -h "{{ rds.instance.endpoint }}" -d test_data -c 'create role mapstory'
  environment: 
    PGPASSWORD: Open4Good
  ignore_errors: true
  
#load test data into postgis table
- name: restore counties data
  command: psql -h "{{ rds.instance.endpoint }}" -f /home/ec2-user/test_data/counties.sql test_data -U postgres
  environment: 
    PGPASSWORD: Open4Good

- name: set postgres as new owner of counties table
  command: psql -U postgres -h "{{ rds.instance.endpoint }}" -d test_data -c 'alter table us_histcounties_gen001_no_index owner to postgres'
  environment: 
    PGPASSWORD: Open4Good
  ignore_errors: true

#delete db for consecutive test runs
- name: ensure geogig_repos is clean
  postgresql_db:
    name: geogig_repos
    login_host: "{{ rds.instance.endpoint }}"
    login_user: postgres
    login_password: Open4Good 
    state: absent
  #if 1st time run ingore error
  ignore_errors: true

- name: create db for Geogig repos
  postgresql_db:
    name: geogig_repos
    login_host: "{{ rds.instance.endpoint }}"
    login_user: postgres
    login_password: Open4Good 
    state: present
    
- name: copy geogig setup script
  copy: 
    src: setupGeoGig.sh
    dest: /home/ec2-user
    mode: 0700
    owner: ec2-user
  
### setup geogig repos in geoserver & RDS
- name: run initial geogig setup
  shell: ./setupGeoGig.sh "{{ rds.instance.endpoint }}"

- name: copy indexing script
  copy:
    src: index_gig_repos.sh
    dest: /home/ec2-user
    mode: 0777

